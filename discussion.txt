Discussion
----------

1. Which would be the most efficient data structure for a data set with the
   following requirements:

  - frequently removing and adding items to the beginning of the data structure

  - frequently removing and adding items to the end of the data structure

  - rarely indexing and searching

  A. A Python list B. Singly linked list C. Doubly linked list

  Explain your answer.

  >> Doubly linked list 
  it is easy to remove item and add items in Doubly linked list we just need to set pointer to the next if we are removing from the beginning and set pointer to the previous one when removing from end. The run time will be O(1).and indexing is searching in O(n)







2. Which would be the most efficient data structure for a data set with the
   following requirements:

  - order is unimportant

  -frequently adding and removing items

  - frequently looking up items

  A. A Python list  B. A Dictionary  C. Deque  D. Binary Search Tree

  Explain your answer.

>>> A dictionary would be better because in looking up, adding, removing item would be O(1)
   we will use python list if order is important. but now in latest python dictionaries are ordered too.








3. Explain why looking up, adding elements, and removing elements from a 
   dictionary or hash map are all O(1) operations.

>>> hash function sets a unique index then if we know the index we can look, add, and remove elements from dictionary by its key and the run time will always be O(1) operations.






4. Explain why removing elements from or adding elements to an arbitrary
   location in a Python list are O(n) operations.

>>>Because if we remove, and add item anywhere except end in python list the run time would be O(n) because every other item after that item will be rearranged.






5. What is the correct runtime for:

  - Bubble Sort?
  O(n^2)

  - Quicksort?
  O(n log n)

  - Merge Sort?
  O(n)

  - Insertion Sort?

  O(n^2)

6. What is the difference between a tree and a graph?

Graphs contains cycles. graph has no root node like trees (graph has no hierarchy like trees)




7. Using the Python implementation of Quicksort from the instructions:

  Given the list [8, 4, 1, 6, 5, 2, 7, 3]:
  When this function is initially called, what are the values of:

    - lst -
    >>>[8, 4, 1, 6, 5, 2, 7, 3]
    - pivot - 
    >>5

    - lo -
    >>> [4, 1, 2, 3]

    - hi -
    >>> [8, 6, 5, 7]



  When the quicksort is first called recursively on the `lo` list, what are the
  values of:

  - lst -
  >>>[4, 1, 2, 3]

  - pivot -
  >>> 2

  - lo -
  >>> [1]

  - hi -
  >> [4, 3]
